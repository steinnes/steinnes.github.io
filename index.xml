<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>steinn.org</title>
    <link>http://steinnes.github.io/</link>
    <description>Recent content on steinn.org</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 10 Feb 2015 21:08:21 +0000</lastBuildDate>
    <atom:link href="http://steinnes.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>brute force still going strong</title>
      <link>http://steinnes.github.io/post/brute-force-still-going-strong/</link>
      <pubDate>Tue, 10 Feb 2015 21:08:21 +0000</pubDate>
      
      <guid>http://steinnes.github.io/post/brute-force-still-going-strong/</guid>
      <description>&lt;p&gt;While setting up this blog I was looking through my little VMs scattered around
different cloud providers to find one which could serve as the A record for
&lt;code&gt;steinn.org&lt;/code&gt; and redirect traffic to &lt;code&gt;steinnes.github.io&lt;/code&gt;.  I logged on to one of my
&lt;a href=&#34;https://www.digitalocean.com&#34;&gt;digital ocean&lt;/a&gt; droplets that I haven&amp;rsquo;t used in
a while so I was slightly surprised to see more than 100k lines in &lt;code&gt;/var/log/auth.log&lt;/code&gt;.&lt;/p&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;https://asciinema.org/a/16270.js&#34; id=&#34;asciicast-16270&#34; async&gt;&lt;/script&gt;

&lt;p&gt;I remember being a teenager and attempting to get access to random systems
I stumbled across on the internet.  I&amp;rsquo;m not going to lie, sometimes I&amp;rsquo;d get in
but the fear of being discovered was more than enough to prevent both any overt
attempts to connect, and to make sure if lucky enough to gain access, no damage
would be done.&lt;/p&gt;

&lt;p&gt;I have the distinct feeling something has changed since the late 90&amp;rsquo;s when I
was pretty much convinced that brute force attacks were just a stupid way to
get caught.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a little &lt;code&gt;iptables&lt;/code&gt;Â snippet if you&amp;rsquo;re wondering how I made my &lt;code&gt;auth.log&lt;/code&gt;
file stop growing:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;iptables -F  &lt;span style=&#34;color: #75715e&#34;&gt;# flush&lt;/span&gt;

iptables -A INPUT -p tcp -s your-ip/32 --destination-port &lt;span style=&#34;color: #ae81ff&#34;&gt;22&lt;/span&gt; -j ACCEPT

iptables -A INPUT -p tcp -s 0.0.0.0/0 --destination-port &lt;span style=&#34;color: #ae81ff&#34;&gt;80&lt;/span&gt; -j ACCEPT
iptables -A INPUT -p tcp -s 0.0.0.0/0 --destination-port &lt;span style=&#34;color: #ae81ff&#34;&gt;443&lt;/span&gt; -j ACCEPT

iptables -A INPUT -j REJECT  &lt;span style=&#34;color: #75715e&#34;&gt;# reject everything else&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>From Monolith to Services @ QuizUp</title>
      <link>http://steinnes.github.io/post/utmessan2015/</link>
      <pubDate>Tue, 10 Feb 2015 11:44:14 +0000</pubDate>
      
      <guid>http://steinnes.github.io/post/utmessan2015/</guid>
      <description>

&lt;p&gt;Last week I did a talk at a local IT conference, &lt;a href=&#34;https://www.utmessan.is&#34;&gt;UT Messan&lt;/a&gt;.
The title was the rather inflated &amp;ldquo;&lt;em&gt;From Monolith to Services at Scale: How
QuizUp is making the (inevitable?) transition, one endpoint at a time&lt;/em&gt;&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;In it I try to tell the story of how we at QuizUp are transitioning to a more
service-oriented architecture, and which steps we decided to take first.&lt;/p&gt;

&lt;p&gt;The route we chose was to use ZooKeeper as the heart of our system for
service registration, discovery and configuration, and then figure out how to
route client requests to services running inside Docker containers.  The
building blocks we ended up using were basically ZooKeeper, NGiNX, Docker, our
own Docker registries (which we refer to as &amp;ldquo;dockistries&amp;rdquo;), as well as a few
custom components which are outlined in the talk:&lt;/p&gt;

&lt;h2 id=&#34;video:72332d114d8f6408c00e9cd6db124848&#34;&gt;video&lt;/h2&gt;

&lt;p&gt;&lt;div class=&#34;embed video-player&#34;&gt;
&lt;iframe class=&#34;youtube-player&#34; type=&#34;text/html&#34; width=&#34;700&#34; height=&#34;400&#34; src=&#34;http://www.youtube.com/embed/GhgH_8-HCVQ&#34; allowfullscreen frameborder=&#34;0&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;slides:72332d114d8f6408c00e9cd6db124848&#34;&gt;slides&lt;/h2&gt;

&lt;p&gt;&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;a36212c2dcc8418290d98ec6b9c0c8a1&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;small&gt;*The slides here above are slightly updated from the ones I used during my talk.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;I would have liked to tell a bit more of a story, as we did create a couple
of services in the spring of 2014 which we always had issues deploying. After
some pondering we realized that without some kind of deployable packages (we
rolled our own, and also looked at using .deb), or standardized containers,
and a service registry we would probably end up with a lot of confusion (and
unexpected outages).  We decided on ZooKeeper, Docker and since we&amp;rsquo;re doing
that why not a dynamic router as well.&lt;/p&gt;

&lt;p&gt;Since the timeslot was only 30 minutes so I condensed this into 20-25 minutes
+ questions.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>about</title>
      <link>http://steinnes.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://steinnes.github.io/about/</guid>
      <description>&lt;p&gt;I am an Icelandic software developer who rarely writes but often rants.&lt;/p&gt;

&lt;p&gt;twitter: &lt;a href=&#34;https://twitter.com/steinnes&#34;&gt;@steinnes&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>